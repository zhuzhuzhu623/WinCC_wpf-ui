
using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using System.Threading.Tasks;
using WinCC.Model.BllModel;

namespace WinCC.Dal.DapperDal
{
     public interface IDapper
    {
         BllResult<List<T>> GetCommonModelByCondition<T>(string v);
         Task<BllResult<List<T>>> GetCommonModelByConditionAsync<T>(string v);
          BllResult<List<T>> GetCommonModelByCondition<T>(string v, IDbConnection connection, IDbTransaction tran);
          Task<BllResult<List<T>>> GetCommonModelByConditionAsync<T>(string v, IDbConnection connection, IDbTransaction tran);
          BllResult<int> GetCommonModelCount<T>(string sql);
          BllResult<int> GetCommonModelCount<T>(string sql, IDbConnection connection, IDbTransaction tran);

          BllResult<int?> SaveCommonModel<T>(T model);
          Task<BllResult<int?>> SaveCommonModelAsync<T>(T model);
          BllResult<int?> SaveCommonModel<T>(T model, IDbConnection connection, IDbTransaction tran);
          Task<BllResult<int?>> SaveCommonModelAsync<T>(T model, IDbConnection connection, IDbTransaction tran);

          BllResult UpdateCommonModel<T>(T model);
          Task<BllResult> UpdateCommonModelAsync<T>(T model);
          BllResult UpdateCommonModel<T>(T model, IDbConnection connection, IDbTransaction tran);
          Task<BllResult> UpdateCommonModelAsync<T>(T model, IDbConnection connection, IDbTransaction tran);

          BllResult DeleteCommonModelByIds<T>(List<int> list);         
         BllResult DeleteCommonModelById<T>(int id);
          Task<BllResult> DeleteCommonModelByIdsAsync<T>(List<int> list);
          BllResult DeleteCommonModelByIds<T>(List<int> list, IDbConnection connection, IDbTransaction tran);
          Task<BllResult> DeleteCommonModelByIdsAsync<T>(List<int> list, IDbConnection connection, IDbTransaction tran);

          BllResult<List<T>> GetCommonModeByPageCondition<T>(int pageNumber, int pageSize, string condition, string orderBy);
          Task<BllResult<List<T>>> GetCommonModeByPageConditionAsync<T>(int pageNumber, int pageSize, string condition, string orderBy);
          BllResult<List<T>> GetCommonModeByPageCondition<T>(IDbConnection connection, IDbTransaction tran, int pageNumber, int pageSize, string condition, string orderBy);
          Task<BllResult<List<T>>> GetCommonModeByPageConditionAsync<T>(IDbConnection connection, IDbTransaction tran, int pageNumber, int pageSize, string condition, string orderBy);


          BllResult<int> ExcuteCommonSqlForInsertOrUpdate(string sql);
          Task<BllResult<int>> ExcuteCommonSqlForInsertOrUpdateAsync(string sql);
          BllResult<int> ExcuteCommonSqlForInsertOrUpdate(string sql, IDbConnection connection, IDbTransaction tran);
          Task<BllResult<int>> ExcuteCommonSqlForInsertOrUpdateAsync(string sql, IDbConnection connection, IDbTransaction tran);

          BllResult<int> ExcuteCommonSqlForInsertOrUpdate(string sql, object param);
          Task<BllResult<int>> ExcuteCommonSqlForInsertOrUpdateAsync(string sql, object param);
          BllResult<int> ExcuteCommonSqlForInsertOrUpdate(string sql, object param, IDbConnection connection, IDbTransaction tran);
          Task<BllResult<int>> ExcuteCommonSqlForInsertOrUpdateAsync(string sql, object param, IDbConnection connection, IDbTransaction tran);

          BllResult<List<T>> GetCommonModelByConditionWithZero<T>(string v);
          Task<BllResult<List<T>>> GetCommonModelByConditionWithZeroAsync<T>(string v);
          BllResult<List<T>> GetCommonModelByConditionWithZero<T>(string v, IDbConnection connection, IDbTransaction tran);
         Task<BllResult<List<T>>> GetCommonModelByConditionWithZeroAsync<T>(string v, IDbConnection connection, IDbTransaction tran);
    }
}
